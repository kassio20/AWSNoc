#!/usr/bin/env python3

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.responses import HTMLResponse
from fastapi.responses import HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import boto3
import json
import logging
from datetime import datetime, timedelta
import asyncio
from botocore.exceptions import ClientError, NoCredentialsError
import uvicorn

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="SelectNOC IA",
    description="AI-powered Network Operations Center with comprehensive AWS monitoring",
    version="2.0.0"
)

# Enable CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Pydantic Models
class AWSAccount(BaseModel):
    id: Optional[int] = None
    name: str
    account_id: str
    region: str
    access_key: str
    secret_key: str
    services: List[str] = ["CloudWatch", "EC2", "RDS", "ELB", "Lambda", "S3", "VPC"]
    status: str = "active"
    created_at: Optional[datetime] = None

class ResourceInfo(BaseModel):
    resource_type: str
    resource_id: str
    name: str
    status: str
    region: str
    availability_zone: Optional[str] = None
    instance_type: Optional[str] = None
    vpc_id: Optional[str] = None
    subnet_id: Optional[str] = None
    security_groups: List[str] = []
    tags: Dict[str, str] = {}
    metrics: Dict[str, Any] = {}
    created_at: datetime

class MetricData(BaseModel):
    metric_name: str
    value: float
    unit: str
    timestamp: datetime

class LogAnalysisRequest(BaseModel):
    message: str
    service: str
    account_id: Optional[int] = None

# In-memory database (replace with real database in production)
accounts_db = {}
resources_db = {}
metrics_db = {}
next_account_id = 1

# AWS Service Discovery Classes
class AWSResourceDiscovery:
    def __init__(self, access_key: str, secret_key: str, region: str):
        self.session = boto3.Session(
            aws_access_key_id=access_key,
            aws_secret_access_key=secret_key,
            region_name=region
        )
        self.region = region

    def validate_credentials(self) -> bool:
        """Validate AWS credentials using STS"""
        try:
            sts = self.session.client('sts')
            sts.get_caller_identity()
            return True
        except Exception as e:
            logger.error(f"AWS credential validation failed: {e}")
            return False

    def discover_all_resources(self) -> List[ResourceInfo]:
        """Discover all supported AWS resources"""
        resources = []
        
        # Discover EC2 instances
        resources.extend(self._discover_ec2_instances())
        
        # Discover RDS instances
        resources.extend(self._discover_rds_instances())
        
        # Discover Load Balancers (ALB/NLB)
        resources.extend(self._discover_load_balancers())
        
        # Discover Target Groups
        resources.extend(self._discover_target_groups())
        
        # Discover Auto Scaling Groups
        resources.extend(self._discover_autoscaling_groups())
        
        # Discover Lambda Functions
        resources.extend(self._discover_lambda_functions())
        
        # Discover S3 Buckets
        resources.extend(self._discover_s3_buckets())
        
        # Discover VPCs
        resources.extend(self._discover_vpcs())
        
        # Discover EBS Volumes
        resources.extend(self._discover_ebs_volumes())
        
        return resources

    def _discover_ec2_instances(self) -> List[ResourceInfo]:
        """Discover EC2 instances"""
        resources = []
        try:
            ec2 = self.session.client('ec2')
            response = ec2.describe_instances()
            
            for reservation in response['Reservations']:
                for instance in reservation['Instances']:
                    name = self._get_tag_value(instance.get('Tags', []), 'Name') or instance['InstanceId']
                    
                    resources.append(ResourceInfo(
                        resource_type="EC2",
                        resource_id=instance['InstanceId'],
                        name=name,
                        status=instance['State']['Name'],
                        region=self.region,
                        availability_zone=instance.get('Placement', {}).get('AvailabilityZone'),
                        instance_type=instance.get('InstanceType'),
                        vpc_id=instance.get('VpcId'),
                        subnet_id=instance.get('SubnetId'),
                        security_groups=[sg['GroupId'] for sg in instance.get('SecurityGroups', [])],
                        tags=self._extract_tags(instance.get('Tags', [])),
                        created_at=instance['LaunchTime']
                    ))
        except Exception as e:
            logger.error(f"Error discovering EC2 instances: {e}")
        
        return resources

    def _discover_rds_instances(self) -> List[ResourceInfo]:
        """Discover RDS instances"""
        resources = []
        try:
            rds = self.session.client('rds')
            response = rds.describe_db_instances()
            
            for db_instance in response['DBInstances']:
                resources.append(ResourceInfo(
                    resource_type="RDS",
                    resource_id=db_instance['DBInstanceIdentifier'],
                    name=db_instance['DBInstanceIdentifier'],
                    status=db_instance['DBInstanceStatus'],
                    region=self.region,
                    availability_zone=db_instance.get('AvailabilityZone'),
                    instance_type=db_instance.get('DBInstanceClass'),
                    vpc_id=db_instance.get('DBSubnetGroup', {}).get('VpcId'),
                    tags={},
                    created_at=db_instance['InstanceCreateTime']
                ))
        except Exception as e:
            logger.error(f"Error discovering RDS instances: {e}")
        
        return resources

    def _discover_load_balancers(self) -> List[ResourceInfo]:
        """Discover Application and Network Load Balancers"""
        resources = []
        try:
            elbv2 = self.session.client('elbv2')
            response = elbv2.describe_load_balancers()
            
            for lb in response['LoadBalancers']:
                resources.append(ResourceInfo(
                    resource_type="LoadBalancer",
                    resource_id=lb['LoadBalancerArn'].split('/')[-1],
                    name=lb['LoadBalancerName'],
                    status=lb['State']['Code'],
                    region=self.region,
                    vpc_id=lb.get('VpcId'),
                    tags={},
                    created_at=lb['CreatedTime']
                ))
        except Exception as e:
            logger.error(f"Error discovering Load Balancers: {e}")
        
        return resources

    def _discover_target_groups(self) -> List[ResourceInfo]:
        """Discover Target Groups"""
        resources = []
        try:
            elbv2 = self.session.client('elbv2')
            response = elbv2.describe_target_groups()
            
            for tg in response['TargetGroups']:
                # Get target health
                health_response = elbv2.describe_target_health(TargetGroupArn=tg['TargetGroupArn'])
                healthy_targets = len([t for t in health_response['TargetHealthDescriptions'] if t['TargetHealth']['State'] == 'healthy'])
                total_targets = len(health_response['TargetHealthDescriptions'])
                
                resources.append(ResourceInfo(
                    resource_type="TargetGroup",
                    resource_id=tg['TargetGroupArn'].split('/')[-1],
                    name=tg['TargetGroupName'],
                    status=f"{healthy_targets}/{total_targets} healthy",
                    region=self.region,
                    vpc_id=tg.get('VpcId'),
                    tags={},
                    metrics={"healthy_targets": healthy_targets, "total_targets": total_targets},
                    created_at=datetime.now()  # Target groups don't have creation time in API
                ))
        except Exception as e:
            logger.error(f"Error discovering Target Groups: {e}")
        
        return resources

    def _discover_autoscaling_groups(self) -> List[ResourceInfo]:
        """Discover Auto Scaling Groups"""
        resources = []
        try:
            asg = self.session.client('autoscaling')
            response = asg.describe_auto_scaling_groups()
            
            for group in response['AutoScalingGroups']:
                resources.append(ResourceInfo(
                    resource_type="AutoScalingGroup",
                    resource_id=group['AutoScalingGroupName'],
                    name=group['AutoScalingGroupName'],
                    status=f"{len(group['Instances'])} instances",
                    region=self.region,
                    vpc_id=group.get('VPCZoneIdentifier', '').split(',')[0] if group.get('VPCZoneIdentifier') else None,
                    tags=self._extract_asg_tags(group.get('Tags', [])),
                    metrics={
                        "desired_capacity": group['DesiredCapacity'],
                        "min_size": group['MinSize'],
                        "max_size": group['MaxSize'],
                        "current_instances": len(group['Instances'])
                    },
                    created_at=group['CreatedTime']
                ))
        except Exception as e:
            logger.error(f"Error discovering Auto Scaling Groups: {e}")
        
        return resources

    def _discover_lambda_functions(self) -> List[ResourceInfo]:
        """Discover Lambda Functions"""
        resources = []
        try:
            lambda_client = self.session.client('lambda')
            response = lambda_client.list_functions()
            
            for func in response['Functions']:
                resources.append(ResourceInfo(
                    resource_type="Lambda",
                    resource_id=func['FunctionName'],
                    name=func['FunctionName'],
                    status=func['State'],
                    region=self.region,
                    vpc_id=func.get('VpcConfig', {}).get('VpcId'),
                    tags={},
                    metrics={
                        "runtime": func['Runtime'],
                        "memory_size": func['MemorySize'],
                        "timeout": func['Timeout']
                    },
                    created_at=datetime.fromisoformat(func['LastModified'].replace('Z', '+00:00'))
                ))
        except Exception as e:
            logger.error(f"Error discovering Lambda functions: {e}")
        
        return resources

    def _discover_s3_buckets(self) -> List[ResourceInfo]:
        """Discover S3 Buckets"""
        resources = []
        try:
            s3 = self.session.client('s3')
            response = s3.list_buckets()
            
            for bucket in response['Buckets']:
                # Get bucket region
                try:
                    location_response = s3.get_bucket_location(Bucket=bucket['Name'])
                    bucket_region = location_response['LocationConstraint'] or 'us-east-1'
                    
                    # Only include buckets in the current region
                    if bucket_region == self.region or (bucket_region is None and self.region == 'us-east-1'):
                        resources.append(ResourceInfo(
                            resource_type="S3",
                            resource_id=bucket['Name'],
                            name=bucket['Name'],
                            status="active",
                            region=bucket_region,
                            tags={},
                            created_at=bucket['CreationDate']
                        ))
                except Exception as e:
                    logger.warning(f"Could not get region for bucket {bucket['Name']}: {e}")
        except Exception as e:
            logger.error(f"Error discovering S3 buckets: {e}")
        
        return resources

    def _discover_vpcs(self) -> List[ResourceInfo]:
        """Discover VPCs"""
        resources = []
        try:
            ec2 = self.session.client('ec2')
            response = ec2.describe_vpcs()
            
            for vpc in response['Vpcs']:
                name = self._get_tag_value(vpc.get('Tags', []), 'Name') or vpc['VpcId']
                
                resources.append(ResourceInfo(
                    resource_type="VPC",
                    resource_id=vpc['VpcId'],
                    name=name,
                    status=vpc['State'],
                    region=self.region,
                    tags=self._extract_tags(vpc.get('Tags', [])),
                    metrics={
                        "cidr_block": vpc['CidrBlock'],
                        "is_default": vpc['IsDefault']
                    },
                    created_at=datetime.now()  # VPCs don't have creation time in API
                ))
        except Exception as e:
            logger.error(f"Error discovering VPCs: {e}")
        
        return resources

    def _discover_ebs_volumes(self) -> List[ResourceInfo]:
        """Discover EBS Volumes"""
        resources = []
        try:
            ec2 = self.session.client('ec2')
            response = ec2.describe_volumes()
            
            for volume in response['Volumes']:
                name = self._get_tag_value(volume.get('Tags', []), 'Name') or volume['VolumeId']
                
                resources.append(ResourceInfo(
                    resource_type="EBS",
                    resource_id=volume['VolumeId'],
                    name=name,
                    status=volume['State'],
                    region=self.region,
                    availability_zone=volume['AvailabilityZone'],
                    tags=self._extract_tags(volume.get('Tags', [])),
                    metrics={
                        "size_gb": volume['Size'],
                        "volume_type": volume['VolumeType'],
                        "iops": volume.get('Iops', 0),
                        "encrypted": volume['Encrypted']
                    },
                    created_at=volume['CreateTime']
                ))
        except Exception as e:
            logger.error(f"Error discovering EBS volumes: {e}")
        
        return resources

    def get_cloudwatch_metrics(self, resource_type: str, resource_id: str) -> Dict[str, Any]:
        """Get CloudWatch metrics for a resource"""
        try:
            cloudwatch = self.session.client('cloudwatch')
            end_time = datetime.utcnow()
            start_time = end_time - timedelta(hours=1)
            
            metrics = {}
            
            if resource_type == "EC2":
                # CPU Utilization
                response = cloudwatch.get_metric_statistics(
                    Namespace='AWS/EC2',
                    MetricName='CPUUtilization',
                    Dimensions=[{'Name': 'InstanceId', 'Value': resource_id}],
                    StartTime=start_time,
                    EndTime=end_time,
                    Period=300,
                    Statistics=['Average']
                )
                if response['Datapoints']:
                    metrics['cpu_utilization'] = response['Datapoints'][-1]['Average']
                
                # Network In
                response = cloudwatch.get_metric_statistics(
                    Namespace='AWS/EC2',
                    MetricName='NetworkIn',
                    Dimensions=[{'Name': 'InstanceId', 'Value': resource_id}],
                    StartTime=start_time,
                    EndTime=end_time,
                    Period=300,
                    Statistics=['Sum']
                )
                if response['Datapoints']:
                    metrics['network_in_bytes'] = response['Datapoints'][-1]['Sum']

            elif resource_type == "RDS":
                # CPU Utilization
                response = cloudwatch.get_metric_statistics(
                    Namespace='AWS/RDS',
                    MetricName='CPUUtilization',
                    Dimensions=[{'Name': 'DBInstanceIdentifier', 'Value': resource_id}],
                    StartTime=start_time,
                    EndTime=end_time,
                    Period=300,
                    Statistics=['Average']
                )
                if response['Datapoints']:
                    metrics['cpu_utilization'] = response['Datapoints'][-1]['Average']
                
                # Database Connections
                response = cloudwatch.get_metric_statistics(
                    Namespace='AWS/RDS',
                    MetricName='DatabaseConnections',
                    Dimensions=[{'Name': 'DBInstanceIdentifier', 'Value': resource_id}],
                    StartTime=start_time,
                    EndTime=end_time,
                    Period=300,
                    Statistics=['Average']
                )
                if response['Datapoints']:
                    metrics['database_connections'] = response['Datapoints'][-1]['Average']

            elif resource_type == "LoadBalancer":
                # Request Count
                response = cloudwatch.get_metric_statistics(
                    Namespace='AWS/ApplicationELB',
                    MetricName='RequestCount',
                    Dimensions=[{'Name': 'LoadBalancer', 'Value': resource_id}],
                    StartTime=start_time,
                    EndTime=end_time,
                    Period=300,
                    Statistics=['Sum']
                )
                if response['Datapoints']:
                    metrics['request_count'] = response['Datapoints'][-1]['Sum']

            return metrics
            
        except Exception as e:
            logger.error(f"Error getting CloudWatch metrics for {resource_type} {resource_id}: {e}")
            return {}

    def _get_tag_value(self, tags: List[Dict], key: str) -> Optional[str]:
        """Extract tag value by key"""
        for tag in tags:
            if tag.get('Key') == key:
                return tag.get('Value')
        return None

    def _extract_tags(self, tags: List[Dict]) -> Dict[str, str]:
        """Extract all tags as key-value pairs"""
        return {tag['Key']: tag['Value'] for tag in tags if 'Key' in tag and 'Value' in tag}

    def _extract_asg_tags(self, tags: List[Dict]) -> Dict[str, str]:
        """Extract Auto Scaling Group tags"""
        return {tag['Key']: tag['Value'] for tag in tags if 'Key' in tag and 'Value' in tag}

# Initialize Bedrock client
def get_bedrock_client():
    try:
        return boto3.client('bedrock-runtime', region_name='us-east-1')
    except Exception as e:
        logger.error(f"Failed to initialize Bedrock client: {e}")
        return None

bedrock_client = get_bedrock_client()

# API Endpoints
@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "service": "SelectNOC IA",
        "environment": "development",
        "version": "2.0.0",
        "features": ["full_aws_discovery", "cloudwatch_metrics", "ai_analysis"]
    }

@app.post("/api/v1/accounts")
async def create_account(account: AWSAccount):
    global next_account_id
    
    # Validate AWS credentials
    discovery = AWSResourceDiscovery(account.access_key, account.secret_key, account.region)
    if not discovery.validate_credentials():
        raise HTTPException(status_code=400, detail="Invalid AWS credentials")
    
    account.id = next_account_id
    account.created_at = datetime.now()
    accounts_db[next_account_id] = account
    next_account_id += 1
    
    # Start background resource discovery
    asyncio.create_task(discover_account_resources(account.id))
    
    return {"status": "success", "message": "Account created successfully", "account_id": account.id}

@app.get("/api/v1/accounts")
async def list_accounts():
    return {"accounts": list(accounts_db.values())}

@app.get("/api/v1/accounts/{account_id}")
async def get_account(account_id: int):
    if account_id not in accounts_db:
        raise HTTPException(status_code=404, detail="Account not found")
    return accounts_db[account_id]

@app.delete("/api/v1/accounts/{account_id}")
async def delete_account(account_id: int):
    if account_id not in accounts_db:
        raise HTTPException(status_code=404, detail="Account not found")
    
    del accounts_db[account_id]
    if account_id in resources_db:
        del resources_db[account_id]
    if account_id in metrics_db:
        del metrics_db[account_id]
    
    return {"status": "success", "message": "Account deleted successfully"}

@app.get("/api/v1/accounts/{account_id}/resources")
async def get_account_resources(account_id: int):
    if account_id not in accounts_db:
        raise HTTPException(status_code=404, detail="Account not found")
    
    account = accounts_db[account_id]
    resources = resources_db.get(account_id, [])
    
    return {
        "account_id": account_id,
        "account_name": account.name,
        "resources": resources
    }

@app.post("/api/v1/accounts/{account_id}/resources/refresh")
async def refresh_account_resources(account_id: int, background_tasks: BackgroundTasks):
    if account_id not in accounts_db:
        raise HTTPException(status_code=404, detail="Account not found")
    
    background_tasks.add_task(discover_account_resources, account_id)
    return {"status": "success", "message": "Resource discovery started"}

@app.get("/api/v1/accounts/{account_id}/monitoring")
async def get_monitoring_summary(account_id: int):
    if account_id not in accounts_db:
        raise HTTPException(status_code=404, detail="Account not found")
    
    account = accounts_db[account_id]
    resources = resources_db.get(account_id, [])
    
    # Count resources by type
    resource_counts = {}
    for resource in resources:
        resource_type = resource.get("resource_type", "Unknown")
        resource_counts[resource_type] = resource_counts.get(resource_type, 0) + 1
    
    return {
        "account_id": account_id,
        "account_name": account.name,
        "status": account.status,
        "last_check": datetime.now(),
        "resource_counts": resource_counts,
        "total_resources": len(resources)
    }

@app.get("/api/v1/accounts/{account_id}/metrics/{resource_type}/{resource_id}")
async def get_resource_metrics(account_id: int, resource_type: str, resource_id: str):
    if account_id not in accounts_db:
        raise HTTPException(status_code=404, detail="Account not found")
    
    account = accounts_db[account_id]
    discovery = AWSResourceDiscovery(account.access_key, account.secret_key, account.region)
    metrics = discovery.get_cloudwatch_metrics(resource_type, resource_id)
    
    return {
        "account_id": account_id,
        "resource_type": resource_type,
        "resource_id": resource_id,
        "metrics": metrics,
        "timestamp": datetime.now()
    }

@app.get("/api/v1/test/bedrock")
async def test_bedrock():
    if not bedrock_client:
        raise HTTPException(status_code=500, detail="Bedrock client not available")
    
    try:
        prompt = "Hello! Please respond with a simple test message to confirm the connection is working."
        
        body = json.dumps({
            "anthropic_version": "bedrock-2023-05-31",
            "max_tokens": 100,
            "messages": [
                {
                    "role": "user",
                    "content": prompt
                }
            ]
        })
        
        response = bedrock_client.invoke_model(
            body=body,
            modelId="anthropic.claude-3-haiku-20240307-v1:0",
            accept="application/json",
            contentType="application/json"
        )
        
        response_body = json.loads(response.get('body').read())
        return {
            "status": "success",
            "message": "Bedrock AI connection successful",
            "response": response_body.get('content', [{}])[0].get('text', 'No response')
        }
    except Exception as e:
        logger.error(f"Bedrock test failed: {e}")
        raise HTTPException(status_code=500, detail=f"Bedrock test failed: {str(e)}")

@app.post("/api/v1/analyze")
async def analyze_log(request: LogAnalysisRequest):
    if not bedrock_client:
        raise HTTPException(status_code=500, detail="Bedrock client not available")
    
    try:
        prompt = f"""
        Analyze this log message from the {request.service} service and provide insights:

        Log Message: {request.message}

        Please provide:
        1. Severity level (LOW, MEDIUM, HIGH, CRITICAL)
        2. Potential root cause
        3. Recommended actions
        4. Risk assessment

        Respond in JSON format.
        """
        
        body = json.dumps({
            "anthropic_version": "bedrock-2023-05-31",
            "max_tokens": 500,
            "messages": [
                {
                    "role": "user",
                    "content": prompt
                }
            ]
        })
        
        response = bedrock_client.invoke_model(
            body=body,
            modelId="anthropic.claude-3-haiku-20240307-v1:0",
            accept="application/json",
            contentType="application/json"
        )
        
        response_body = json.loads(response.get('body').read())
        ai_analysis = response_body.get('content', [{}])[0].get('text', '')
        
        return {
            "status": "success",
            "service": request.service,
            "original_message": request.message,
            "ai_analysis": ai_analysis,
            "analyzed_at": datetime.now()
        }
    except Exception as e:
        logger.error(f"Log analysis failed: {e}")
        raise HTTPException(status_code=500, detail=f"Log analysis failed: {str(e)}")

# Background task for resource discovery
async def discover_account_resources(account_id: int):
    """Background task to discover resources for an account"""
    try:
        if account_id not in accounts_db:
            logger.error(f"Account {account_id} not found for resource discovery")
            return
        
        account = accounts_db[account_id]
        logger.info(f"Starting resource discovery for account {account.name}")
        
        discovery = AWSResourceDiscovery(account.access_key, account.secret_key, account.region)
        resources = discovery.discover_all_resources()
        
        # Convert ResourceInfo objects to dictionaries for storage
        resources_dict = []
        for resource in resources:
            resource_dict = resource.dict()
            # Convert datetime to string for JSON serialization
            if isinstance(resource_dict['created_at'], datetime):
                resource_dict['created_at'] = resource_dict['created_at'].isoformat()
            resources_dict.append(resource_dict)
        
        resources_db[account_id] = resources_dict
        logger.info(f"Discovered {len(resources)} resources for account {account.name}")
        
        # Get metrics for each resource
        for resource in resources_dict:
            metrics = discovery.get_cloudwatch_metrics(resource["resource_type"], resource["resource_id"])
            if metrics:
                if account_id not in metrics_db:
                    metrics_db[account_id] = {}
                metrics_db[account_id][f"{resource['resource_type']}:{resource['resource_id']}"] = metrics
        
    except Exception as e:
        logger.error(f"Resource discovery failed for account {account_id}: {e}")


# Endpoint para servir o dashboard
@app.get("/dashboard", response_class=HTMLResponse)
async def get_dashboard():
    try:
        with open("/opt/selectnoc/simple-dashboard.html", "r", encoding="utf-8") as f:
            content = f.read()
        return HTMLResponse(content=content)
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="Dashboard not found")



# Endpoints para análise de alertas

# Funções de análise de recursos

def analyze_resource_health(resource):
    """Analyze a resource and return alert information"""
    resource_type = resource.get("resource_type", "")
    resource_id = resource.get("resource_id", "")
    status = resource.get("status", "")
    
    # Analisar diferentes tipos de recursos
    if resource_type == "target_group":
        if "0/" in status and "healthy" in status:
            return {
                "resource_type": resource_type,
                "resource_id": resource_id,
                "severity": "critical",
                "title": f"Target Group {resource_id} - No Healthy Targets",
                "description": f"Target group has no healthy targets: {status}",
                "affected_service": "Load Balancer",
                "impact": "Service unavailable - traffic cannot be routed",
                "detected_at": datetime.now().isoformat()
            }
        elif "/" in status and "healthy" in status:
            healthy_count = int(status.split("/")[0])
            total_count = int(status.split("/")[1].split(" ")[0])
            if healthy_count < total_count:
                return {
                    "resource_type": resource_type,
                    "resource_id": resource_id,
                    "severity": "warning",
                    "title": f"Target Group {resource_id} - Partial Healthy Targets",
                    "description": f"Target group has degraded health: {status}",
                    "affected_service": "Load Balancer",
                    "impact": "Reduced capacity - some targets are unhealthy",
                    "detected_at": datetime.now().isoformat()
                }
    
    elif resource_type == "instance":
        if status != "running":
            severity = "critical" if status in ["stopped", "terminated"] else "warning"
            return {
                "resource_type": resource_type,
                "resource_id": resource_id,
                "severity": severity,
                "title": f"EC2 Instance {resource_id} - {status.title()}",
                "description": f"Instance is in {status} state",
                "affected_service": "Compute",
                "impact": "Service disruption - instance not available",
                "detected_at": datetime.now().isoformat()
            }
    
    elif resource_type == "database":
        if status != "available":
            severity = "critical" if status in ["stopped", "failed"] else "warning"
            return {
                "resource_type": resource_type,
                "resource_id": resource_id,
                "severity": severity,
                "title": f"RDS Database {resource_id} - {status.title()}",
                "description": f"Database is in {status} state",
                "affected_service": "Database",
                "impact": "Data access disruption - database not available",
                "detected_at": datetime.now().isoformat()
            }
    
    # Recurso saudável
    return {
        "resource_type": resource_type,
        "resource_id": resource_id,
        "severity": "healthy",
        "title": f"{resource_type.title()} {resource_id} - Healthy",
        "description": f"Resource is operating normally: {status}",
        "affected_service": "N/A",
        "impact": "No impact",
        "detected_at": datetime.now().isoformat()
    }

async def generate_ai_analysis(resource, alert_info):
    """Generate AI analysis for a resource issue"""
    try:
        prompt = f"""Analyze this AWS resource issue and provide detailed technical analysis:

Resource Type: {resource.get("resource_type")}
Resource ID: {resource.get("resource_id")}
Current Status: {resource.get("status")}
Alert Severity: {alert_info["severity"]}
Issue Description: {alert_info["description"]}

Please provide:
1. Root cause analysis
2. Potential impacts on the system
3. Steps to investigate further
4. Preventive measures

Be specific and technical in your analysis."""

        response = bedrock_client.converse(
            modelId="us.anthropic.claude-3-5-sonnet-20241022-v2:0",
            messages=[{
                "role": "user",
                "content": [{"text": prompt}]
            }]
        )
        
        return response["output"]["message"]["content"][0]["text"]
    except Exception as e:
        return f"AI analysis temporarily unavailable: {str(e)}"

def generate_recommendations(resource, alert_info):
    """Generate actionable recommendations for fixing the issue"""
    recommendations = []
    
    if alert_info["resource_type"] == "target_group":
        if "0/" in resource.get("status", ""):
            recommendations = [
                {
                    "action": "Check target health",
                    "command": f"aws elbv2 describe-target-health --target-group-arn {resource.get(esource_id)}",
                    "description": "Verify which targets are unhealthy and why"
                },
                {
                    "action": "Check application logs",
                    "command": "Check application logs on the target instances",
                    "description": "Look for application errors or startup issues"
                },
                {
                    "action": "Verify health check configuration",
                    "command": f"aws elbv2 describe-target-groups --target-group-arns {resource.get(esource_id)}",
                    "description": "Check if health check path and settings are correct"
                },
                {
                    "action": "Test health check manually",
                    "command": "curl -I http://target-ip:port/health-check-path",
                    "description": "Manually test the health check endpoint"
                }
            ]
    
    elif alert_info["resource_type"] == "instance":
        if resource.get("status") == "stopped":
            recommendations = [
                {
                    "action": "Start the instance",
                    "command": f"aws ec2 start-instances --instance-ids {resource.get(esource_id)}",
                    "description": "Start the stopped EC2 instance"
                },
                {
                    "action": "Check instance logs",
                    "command": f"aws ec2 get-console-output --instance-id {resource.get(esource_id)}",
                    "description": "Review console output for startup issues"
                }
            ]
    
    elif alert_info["resource_type"] == "database":
        if resource.get("status") != "available":
            recommendations = [
                {
                    "action": "Check database status",
                    "command": f"aws rds describe-db-instances --db-instance-identifier {resource.get(esource_id)}",
                    "description": "Get detailed database status information"
                },
                {
                    "action": "Review database logs",
                    "command": f"aws rds describe-db-log-files --db-instance-identifier {resource.get(esource_id)}",
                    "description": "Check database error logs"
                }
            ]
    
    return recommendations


@app.get("/api/v1/accounts/{account_id}/alerts")
async def get_account_alerts(account_id: int):
    """Get all active alerts for an account"""
    if account_id not in accounts_db:
        raise HTTPException(status_code=404, detail="Account not found")
    
    account = accounts_db[account_id]
    resources = resources_db.get(account_id, [])
    
    alerts = []
    
    for resource in resources:
        alert_info = analyze_resource_health(resource)
        if alert_info["severity"] != "healthy":
            alerts.append(alert_info)
    
    return {
        "account_id": account_id,
        "account_name": account.name,
        "total_alerts": len(alerts),
        "alerts": alerts
    }

@app.get("/api/v1/accounts/{account_id}/alerts/{resource_type}/{resource_id}")
async def get_resource_alert_details(account_id: int, resource_type: str, resource_id: str):
    """Get detailed alert analysis for a specific resource"""
    if account_id not in accounts_db:
        raise HTTPException(status_code=404, detail="Account not found")
    
    account = accounts_db[account_id]
    resources = resources_db.get(account_id, [])
    
    # Find the specific resource
    target_resource = None
    for resource in resources:
        if resource.get("resource_type") == resource_type and resource.get("resource_id") == resource_id:
            target_resource = resource
            break
    
    if not target_resource:
        raise HTTPException(status_code=404, detail="Resource not found")
    
    # Analyze the resource
    alert_info = analyze_resource_health(target_resource)
    
    # Generate AI analysis if there is an issue
    ai_analysis = None
    recommendations = []
    
    if alert_info["severity"] != "healthy":
        ai_analysis = await generate_ai_analysis(target_resource, alert_info)
        recommendations = generate_recommendations(target_resource, alert_info)
    
    return {
        "account_id": account_id,
        "resource": target_resource,
        "alert": alert_info,
        "ai_analysis": ai_analysis,
        "recommendations": recommendations,
        "timestamp": datetime.now().isoformat()
    }


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)


