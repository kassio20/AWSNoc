import os
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
import uvicorn
from dotenv import load_dotenv
import boto3
import json

load_dotenv()

app = FastAPI(
    title="SelectNOC IA",
    description="AI-Powered AWS Log Analysis - Development",
    version="1.0.0-dev"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {
        "message": "SelectNOC IA - Development Environment",
        "status": "running",
        "version": "1.0.0-dev"
    }

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "service": "SelectNOC IA",
        "environment": "development",
        "version": "1.0.0"
    }

@app.get("/api/v1/test/bedrock")
async def test_bedrock():
    try:
        bedrock = boto3.client('bedrock-runtime', region_name='us-east-2')
        
        # Test with a simple prompt
        response = bedrock.invoke_model(
            modelId="anthropic.claude-3-haiku-20240307-v1:0",
            body=json.dumps({
                "anthropic_version": "bedrock-2023-05-31",
                "messages": [{"role": "user", "content": "Hello! This is a test."}],
                "max_tokens": 100,
                "temperature": 0.1
            })
        )
        
        result = json.loads(response['body'].read())
        
        return {
            "status": "success",
            "message": "Bedrock is working!",
            "response": result['content'][0]['text']
        }
        
    except Exception as e:
        return {
            "status": "error",
            "message": f"Bedrock test failed: {str(e)}"
        }

@app.post("/api/v1/analyze")
async def analyze_log(log_data: dict):
    """Simple log analysis endpoint"""
    try:
        message = log_data.get('message', '')
        service = log_data.get('service', 'unknown')
        
        # Simple analysis logic for development
        severity = "LOW"
        if any(word in message.lower() for word in ['error', 'fail', 'exception']):
            severity = "HIGH"
        elif any(word in message.lower() for word in ['warning', 'warn']):
            severity = "MEDIUM"
            
        return {
            "severity": severity,
            "confidence": 0.8,
            "category": "application",
            "summary": f"Log analysis for {service}: {severity} severity detected",
            "service": service,
            "message": message
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )

